#!/usr/bin/python
from enum import IntEnum, auto
from functools import partial, reduce
from typing import Callable, Optional, TypedDict, Final, Union
import argparse
import os
import subprocess as sp
import sys
import tempfile
import shutil


class ExitCode(IntEnum):
    INTERNAL_ERROR = -1
    OK = auto()
    ARGUMENT_ERROR = auto()
    LANGUAGE_ERROR = auto()
    EDITOR_ERROR = auto()
    FILE_ERROR = auto()
    RUNNER_ERROR = auto()
    CODE_ERROR = auto()


class RunException(Exception):
    def __init__(self, errorCode: ExitCode, msg: str) -> None:
        super().__init__(errorCode, msg)
        self.errorCode = errorCode
        self.msg = msg


def _runFile(program: Union[str, list[str]], args: list[str], argv: list[str], file: str, _: list[str]) -> sp.CompletedProcess[bytes]:
    if isinstance(program, str):
        return sp.run([program] + args + [file] + argv, stdout=sp.PIPE, stderr=sp.PIPE)
    else:
        return sp.run(program + args + [file] + argv, stdout=sp.PIPE, stderr=sp.PIPE)


def _runGCC(compiler: str, opts: list[str], args: list[str], argv: list[str], file: str, usedFiles: list[str]) -> sp.CompletedProcess[bytes]:
    # FIXME: this is not portable
    outfile = os.path.join(tempfile.gettempdir(), "a.out")
    usedFiles.append(outfile)
    r = sp.run([compiler] + opts + [outfile, file] + args,
               stdout=sp.PIPE, stderr=sp.PIPE)
    if r.returncode != 0:
        return r
    return sp.run([outfile] + argv, stdout=sp.PIPE, stderr=sp.PIPE)


def _runCSC(compiler: str, opts: list[str], program: str, args: list[str], argv: list[str], file: str, usedFiles: list[str]) -> sp.CompletedProcess[bytes]:
    # FIXME: this is not portable
    outfile = os.path.join(tempfile.gettempdir(), "a.out")
    usedFiles.append(outfile)
    opts.append(f"/out:{outfile}")
    r = sp.run([compiler] + opts + [file] + args,
               stdout=sp.PIPE, stderr=sp.PIPE)
    if r.returncode != 0:
        return r
    return sp.run([program, outfile] + argv, stdout=sp.PIPE, stderr=sp.PIPE)


def _runWasm(assembler: str, program: str, args: list[str], argv: list[str], file: str, usedFiles: list[str]) -> sp.CompletedProcess[bytes]:
    outfile = os.path.join(tempfile.gettempdir(), "a.wasm")
    usedFiles.append(outfile)
    compiler = bytes(
        f"WebAssembly.compile(require('fs').readFileSync('{outfile}')).then(b => WebAssembly.instantiate(b)).then(e => process.exit(e.exports.main())).catch(err => console.log(err) || process.exit(-1))", 'utf8')
    r = sp.run([assembler, file, '-o', outfile] + args,
               stdout=sp.PIPE, stderr=sp.PIPE)
    if r.returncode != 0:
        return r
    return sp.run([program] + argv,
                  input=compiler,
                  stdout=sp.PIPE, stderr=sp.PIPE)


class Runner:

    class LangT(TypedDict):
        # Use the second parameter to store the list of files used by the runner.
        # Append to the list to have the files automatically deleted at the end of the run
        runner: Callable[
            [list[str], list[str], str, list[str]],  # args
            sp.CompletedProcess                     # ret
        ]

        # has to include the dot. e.g '.py' not 'py'
        extension: str

        # list of executables that have to be present in order to run the program
        req: list[str]

    LangsT = dict[str, LangT]

    _NO_SNIP: Final[str] = """


"""
    _NO_PROGRAM: Final[None] = None
    _TAB: Final[str] = "    "
    _CACHE_NAME: Final[str] = "runc_cache"

    _snippets: dict[str, str] = {
        "c":
        """#include <stdio.h>
# include <math.h>

int main(int argc, const char **argv) {


    return 0;
}
""",
        "c++":
        """#include <iostream>
# include <vector>
# include <string>
# include <algorithm>
# include <cmath>


int main(int argc, const char **argv) {


    return 0;
}
""",
        "c#":
        """using System;

namespace Runc {
    class Runner {
        static void Main(string[] args) {


        }
    }
}
""",
        "d":
        """import std.stdio, std.range, std.algorithm;

int main(){


    return 0;
}
""",
        "haskell":
        """module Main where


main :: IO ()
main = undefined


""",
        "java":
        """
class Runc {

    public static void main(String[] args){

    }

}
""",
        "javascript":
        """const fs = require("fs");
const process = require("process");



""",
        "go":
        """package main
import "fmt"


func main() {


}
""",
        "perl":
        """use warnings;
use strict;


""",
        "purescript":
            """module Main where

import Prelude
import Effect
import Effect.Console

main :: Effect Unit
main = _a

""",
        "python":
        """import sys, math, time, random


""",
        "rust": """

fn main() {


}

        """,
        "scheme": """(begin


 )
 """,
        "typescript":
        """import fs from "fs";
import path from "path";


""",
        "wasm":
            """(module
    (func (result  i32)


        (i32.const 0)
    )
  (export "main" (func 0))
)

""",
        "zig":
        """const std = @import("std");

pub fn main() void {


}
""",
    }

    def _getHistFile(self) -> Optional[str]:
        if not self._cacheDir:
            return None

        hist = os.path.join(self._cacheDir, self._CACHE_NAME +
                            self._langs[self._lang]["extension"])
        return hist

    def _loadHist(self, newHist: bool) -> str:
        emptyCache = self._snippets.get(self._lang) or self._NO_SNIP
        if not (hist := self._getHistFile()) or newHist:
            return emptyCache

        if os.path.exists(hist):
            with open(hist, 'r') as f:
                return f.read()

        return emptyCache

    def _storeHist(self) -> None:
        if not (hist := self._getHistFile()):
            return
        shutil.copy2(self._file, hist)

    _lang: str
    _langs: LangsT = {
        "bash":         {"runner": partial(_runFile, "bash"), "extension": ".bash", "req": ["bash"]},
        "c":            {"runner": partial(_runGCC, "gcc", ["-lm", "-Og", "-o"]), "extension": ".c", "req": ["gcc"]},
        "c++":          {"runner": partial(_runGCC, "g++", ["-lm", "-Og", "-o"]), "extension": ".cpp", "req": ["g++"]},
        "c#":           {"runner": partial(_runCSC, "csc", ["/target:exe"], "mono"), "extension": ".cs", "req": ["mono", "csc"]},
        "cmake":        {"runner": partial(_runFile, ["cmake", "-P"]), "extension": ".cmake", "req": ["cmake"]},
        "coffeescript": {"runner": partial(_runFile, "coffee"), "extension": ".coffee", "req": ["coffee"]},
        "d":            {"runner": partial(_runFile, "rdmd"), "extension": ".d", "req": ["dmd", "rdmd"]},
        "dash":         {"runner": partial(_runFile, "dash"), "extension": ".dash", "req": ["dash"]},
        "go":           {"runner": partial(_runFile, ["go", "run"]), "extension": ".go", "req": ["go"]},
        "haskell":      {"runner": partial(_runFile, "runghc"), "extension": ".hs", "req": ["ghc", "runghc"]},
        "java":         {"runner": partial(_runFile, "java"), "extension": ".java", "req": ["java"]},
        "javascript":   {"runner": partial(_runFile, "node"), "extension": ".js", "req": ["node"]},
        "lua":          {"runner": partial(_runFile, "lua"), "extension": ".lua", "req": ["lua"]},
        "ocaml":        {"runner": partial(_runFile, "ocaml"), "extension": ".ml", "req": ["ocaml"]},
        "perl":         {"runner": partial(_runFile, "perl"), "extension": ".pl", "req": ["perl"]},
        "purescript":   {"runner": partial(_runFile, ["spago", "script"]), "extension": ".purs", "req": ["spago", "purs"]},
        "python":       {"runner": partial(_runFile, "python"), "extension": ".py", "req": ["python"]},
        "ruby":         {"runner": partial(_runFile, "ruby"), "extension": ".rb", "req": ["ruby"]},
        "rust":         {"runner": partial(_runGCC, "rustc", ["-o"]), "extension": ".rs", "req": ["rustc"]},
        "sh":           {"runner": partial(_runFile, "sh"), "extension": ".sh", "req": ["sh"]},
        "scheme":       {"runner": partial(_runFile, "guile"), "extension": ".scm", "req": ["guile"]},
        "typescript":   {"runner": partial(_runFile, "ts-node"), "extension": ".ts", "req": ["ts-node"]},
        "wasm":         {"runner": partial(_runWasm, "wat2wasm", "node"), "extension": ".wat", "req": ["wat2wasm", "node"]},
        "zig":          {"runner": partial(_runFile, ["zig", "run"]), "extension": ".zig", "req": ["zig"]},
        "zsh":          {"runner": partial(_runFile, "zsh"), "extension": ".zsh", "req": ["zsh"]},
    }
    _aliases = {
        "cpp": "c++",
        "cs": "c#",
        "csharp": "c#",
        "coffee": "coffeescript",
        "cxx": "c++",
        "hs": "haskell",
        "js": "javascript",
        "ml": "ocaml",
        "pl": "perl",
        "purs": "purescript",
        "py": "python",
        "rb": "ruby",
        "rs": "rust",
        "scm": "scheme",
        "ts": "typescript",
        "wat": "wasm",
    }

    _editor: str
    _file: str
    _usedFiles: list[str] = []
    _cacheDir: Optional[str]
    ret: ExitCode

    def _safeDecode(self, b: bytes, msg=True) -> str:
        try:
            return b.decode('utf8')
        except UnicodeDecodeError as e:
            out: list[str] = []
            if msg:
                print(
                    f"Warning: some output bytes could not be printed and are shown as hex: {e.reason}\n", file=sys.stderr)
            out.append(self._safeDecode(e.object[:e.start], False))
            for by in e.object[e.start:e.end]:
                out.append(hex(by))
            out.append(self._safeDecode(e.object[e.end:], False))
            return ''.join(out)

    def _makeFile(self, newHist: bool) -> str:
        with open(os.path.join(tempfile.gettempdir(), f"runc_runner{self._langs[self._lang]['extension']}"), "w") as f:
            self._usedFiles.append(f.name)
            f.write(self._loadHist(newHist))
            return f.name

    def _getFailedReq(self, lang: str) -> list[str]:
        return list(
            map(lambda x: x[1],
                filter(lambda x: not x[0],
                       ((shutil.which(l), l)
                        for l in self._langs[lang]["req"])
                       )
                )
        )

    def _getLang(self, lang: Optional[str]) -> str:
        if not lang:
            raise RunException(ExitCode.LANGUAGE_ERROR,
                               "Language has to be specified")

        lang = lang.lower()

        if lang in self._aliases:
            lang = self._aliases[lang]

        if lang in self._langs:
            r = self._getFailedReq(lang)
            if r:
                raise RunException(ExitCode.RUNNER_ERROR,
                                   f"could not fulfil all the requirements. Missing: {r}")
            return lang

        raise RunException(ExitCode.LANGUAGE_ERROR,
                           f"Unsupported language: {lang}")

    def _getEditor(self) -> str:
        if "EDITOR" not in os.environ:
            raise RunException(ExitCode.EDITOR_ERROR,
                               "Could not determine editor. Try setting EDITOR environment variable.")
        return os.environ["EDITOR"]

    def _openEditor(self, newHist: bool) -> str:
        f = self._makeFile(newHist)
        r = sp.run([self._editor, f])
        if r.returncode != 0:
            raise RunException(
                ExitCode.EDITOR_ERROR, f"Failed to run the editor. Command {r.args} failed with {r.returncode}:\n\n{self._safeDecode(r.stderr)}")
        return f

    def _getCacheDir(self) -> Optional[str]:
        if sys.platform == "darwin":
            # TODO: figure out how to do this on mac?
            # Cache dir should be `~/Library/Caches/`
            return None

        if ((cache := os.environ.get("XDG_CACHE_HOME")) or ((h := os.environ.get("HOME")) and (cache := os.path.join(h, ".cache")))) and os.path.exists(cache):
            cache = os.path.join(cache, self._CACHE_NAME)
            if os.path.exists(cache):
                return cache
            os.mkdir(cache)
            return cache

        return None

    def __init__(self, lang: Optional[str], compilerArgs: Optional[list[str]], progArgs: Optional[list[str]], noHist: bool, newHist: bool) -> None:
        try:
            self.ret = ExitCode.OK
            self._cacheDir = None if noHist else self._getCacheDir()
            self._lang = self._getLang(lang)
            self._editor = self._getEditor()
            self._file = self._openEditor(newHist)
            self._storeHist()
            self.run(compilerArgs, progArgs)
        except RunException as re:
            print(re.msg, file=sys.stderr)
            self.ret = re.errorCode

    def __del__(self) -> None:
        for file in self._usedFiles:
            (os.path.exists(file) and os.remove(file))

    def run(self, compilerArgs: Optional[list[str]], progArgs: Optional[list[str]]) -> None:
        args: list[str] =\
            [] if not compilerArgs else compilerArgs[0].split(' ')

        argv: list[str] =\
            [] if not progArgs else progArgs[0].split(' ')

        r = self._langs[self._lang]["runner"](
            args, argv, self._file, self._usedFiles
        )

        if r.returncode != 0:
            errstdout = self._safeDecode(
                r.stdout).replace('\n', '\n' + self._TAB)
            errstderr = self._safeDecode(
                r.stderr).replace('\n', '\n' + self._TAB)
            errcmd = r.args if isinstance(r.args, str) else reduce(
                lambda a, b: a + ' ' + b, r.args)
            errmsg = f"Command '{errcmd}' failed with {r.returncode}:\n\nstdout:\n{self._TAB}{errstdout}\n\nstderr:\n{self._TAB}{errstderr}"
            raise RunException(ExitCode.CODE_ERROR, errmsg)

        resstdout = self._safeDecode(r.stdout).replace('\n', '\n' + self._TAB)
        resstderr = self._safeDecode(r.stderr).replace('\n', '\n' + self._TAB)
        resmsg = f"stdout:\n{self._TAB}{resstdout}\n\nstderr:\n{self._TAB}{resstderr}"
        print(resmsg)


def main(args: argparse.Namespace) -> int:

    if args.ls:
        print("Avaliable language:\n___________________")
        list(map(partial(print, "   "), Runner._langs))
        return ExitCode.OK
    if args.aliases:
        print("Avaliable aliases:\n___________________")
        list(map(lambda a: print(str(a[0]).rjust(10), ':', str(
            a[1]).ljust(10)), Runner._aliases.items()))
        return ExitCode.OK

    if args.lang:
        return Runner(args.lang, args.compilerArgs, args.progArgs, args.noHist, args.newHist).ret

    print("Bad args. try '-h/--help'")
    return ExitCode.ARGUMENT_ERROR


def genEpilog() -> str:
    out = []
    out.append("Exit codes:")

    for c in ExitCode:
        out.append(
            f"{' ' * (7 if c.value < 0 or  c.value > 9 else 8)}{c.value} : {c.name}")
    out.append(' ')
    return '\n'.join(out)


def parseArgs() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="runc", description="Open the EDITOR. Write some code. Have it executed.", epilog=genEpilog(),
                                     formatter_class=argparse.RawDescriptionHelpFormatter, exit_on_error=False)
    parser.add_argument('--temp', '-t', dest='noHist', action='store_true',
                        help='ignore history and use default snippet')
    parser.add_argument('--new-history', '-n', dest='newHist', action='store_true',
                        help='reset current language history to default')
    parser.add_argument('--args', metavar='ARGS', dest='compilerArgs', nargs=1, default=None,
                        help="space separated list of arguments to be passed to the compiler or the interpreter.")
    parser.add_argument('--argv', metavar='ARGS', dest='progArgs', nargs=1, default=None,
                        help="space separated list of arguments to be passed to the executed program")
    parser.add_argument('lang', metavar='LANG', nargs='?',
                        help='language to be ran', default=None)
    parser.add_argument('--ls', '-l', action="store_true",
                        help="list available languages")
    parser.add_argument('--aliases', '-a', action="store_true",
                        help="list available languages")

    return parser.parse_args()


if __name__ == "__main__":

    if (sys.version_info.major < 3 or sys.version_info.minor < 9):
        print(
            f"Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} not supported")
        exit(ExitCode.INTERNAL_ERROR)
    try:
        exit(main(parseArgs()))
    except argparse.ArgumentError as e:
        print(e)
        exit(ExitCode.ARGUMENT_ERROR)
    except Exception as e:
        print("Unexpected exception occurred:", e)
        exit(ExitCode.INTERNAL_ERROR)
